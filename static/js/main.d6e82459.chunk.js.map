{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onsearchChange","event","setState","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kOAceA,EAZJ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GACzB,OACS,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAA1B,mBACnB,6BACA,4BAAKF,EAAL,KACA,+BAAKC,EAAL,QCkBGK,EAvBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACZC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GACpC,OACK,kBAAC,EAAD,CACCC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAMxB,OAES,6BACDO,ICHOK,EAdC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC7B,OAEC,yBAAKZ,UAAU,OACV,2BACAA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCIFI,EAZF,SAACC,GACd,OACK,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAkBC,OAAO,UAEjEJ,EAAMK,WCmCGC,G,wDAlCd,aAAc,IAAD,8BACZ,gBAaFC,eAAe,SAACC,GAChB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAbvC,EAAKC,MAAQ,CACZzB,OAAQ,GACRO,YAAa,IAJF,E,gEAQO,IAAD,OACbmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACtB,OAAQ8B,S,+BAM/B,IAAD,OACAC,EAAaC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAjC,GAC3C,OAAOA,EAAOP,KAAKyC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAGtE,OACQ,yBAAKtC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACT,kBAAC,EAAD,CAAUpB,OAAQ+B,U,GA5BFK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d6e82459.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({name, email ,id})=>{\r\n\treturn(\r\n          <div className=' tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow5'>\r\n            <img alt='robo' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n            <h2>{name} </h2>\r\n            <p> {email} </p>\r\n            </div>\r\n            </div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({robots})=>{\r\nconst cardComponent=robots.map((user,i)=>{\r\n return( \r\n      <Card \r\n       key={i} \r\n       id={robots[i].id} \r\n       name={robots[i].name} \r\n       email={robots[i].email} \r\n       />\r\n      );   \r\n})\r\n\r\n\r\nreturn(\r\n        \r\n         <div>\r\n\t      {cardComponent}\r\n\t</div>\r\n\r\n\r\n\t);\r\n\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n return(\r\n\r\n \t<div className='pa2'>\r\n       <input \r\n       className='pa3 ba b--green bg-lightest-blue'\r\n       type='search' \r\n       placeholder='search robots'\r\n       onChange={searchChange}\r\n       />\r\n \t</div>\r\n \t);\r\n\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\nreturn(\r\n     <div style={{overflowY: 'scroll', border:'1px solid black',height:'700px'}}>\r\n     {\r\n     \tprops.children\r\n     }\r\n     </div>\r\n\r\n\r\n\t);\r\n\r\n};\r\nexport default Scroll;","import React, { Component }  from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport { robots } from './robots';\r\nimport './App.css';\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n       fetch('https://jsonplaceholder.typicode.com/users')\r\n       .then(response=>response.json())\r\n       .then(users=>this.setState({robots: users}));\r\n\r\n\t}\r\nonsearchChange=(event)=>{\r\nthis.setState({searchfield: event.target.value})\r\n}\r\n   render(){\r\n     const filterRobots=this.state.robots.filter(robots =>{\r\n     \treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n     })\r\n\r\n\treturn(\r\n         <div className='tc'>\r\n           <h1 className='f2'>RoboFriends</h1>\r\n           <SearchBox searchChange={this.onsearchChange}/> \r\n           <Scroll>\r\n\t\t<CardList robots={filterRobots}/>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(<App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}